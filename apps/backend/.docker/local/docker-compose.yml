version: '3.8'
services:
  dev_db:
    container_name: tracker_dev_db
    image: postgres:${POSTGRES_VERSION}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - /data/trackerpostgres/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - tracker-network

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - tracker-network
    ports:
      - "6379:6379"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_NAMES: PLAINTEXT,INTERNAL
      KAFKA_LISTENER_INTERFACE: INSIDE
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092 # Слушаем на всех интерфейсах
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - tracker-network
    ports:
      - "9092:9092"
      - "9093:9093" # Expose the second port for internal communication

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    networks:
      - tracker-network
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - tracker-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  adminer:
    container_name: "blockchaintracker_adminer"
    image: adminer
    restart: always
    links:
      - dev_db
    networks:
      - tracker-network
    ports:
      - 8081:8080
volumes:
  postgres_data:


networks:
  tracker-network:
    driver: bridge
